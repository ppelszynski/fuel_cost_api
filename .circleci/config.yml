version: 2 # use CircleCI 2.0
orbs:
  browser-tools: circleci/browser-tools@0.1.2
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 1 # run three instances of this job in parallel
    docker: # run the steps with Docker
      - image: circleci/ruby:2.6.3-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: przemek
          RAILS_ENV: test
      - image: circleci/postgres:11.3 # database image
        environment: # environment variables for database
          POSTGRES_USER: przemek
          POSTGRES_DB: fuel_cost_api_test
          POSTGRES_PASSWORD: "zsrr1991"
      - image: selenium/standalone-chrome
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      # Which version of bundler?
      - run:
          name: Install bundler
          command: |
            gem install bundler:2.0.2
      ## Restore bundle cache
      - restore_cache:
          name: Restoring Bundler Cache
          keys:
            - school_register-bundle-{{ checksum "Gemfile.lock" }}
            - school_register-bundle-
      - run:
          name: Bundle Install
          command: bundle check || bundle install --frozen
      # Store bundle cache
      - save_cache:
          name: Saving Bundler Cache
          key: school_register-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: bundle exec rails db:create

      # Run rspec in parallel
      - run:
          name: "RSpec"
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - run:
          name: Heroku
          command: git push heroku master
      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs
